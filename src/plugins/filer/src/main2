"---------------------------------
" vim:set ft=vim:
"
" 2014/09/12 ryo
" Filer plugin
"
" see => 
"---------------------------------

source $plugins_filer/src/layout
let $filerworkfile = $plugins_filer . '/src/plugins/filer/workfiles/tree.filerworkfile'
let $fileworkfilebufnum = 0

source $plugins_filer/src/syntax

augroup filer
	autocmd!
	autocmd VimEnter * :call Toggle() | :call OutputNewTree()
	autocmd VimEnter * :cd $devroot

	autocmd BufEnter *.filerworkfile call KeyMapping()
	autocmd BufEnter *.filerworkfile source $plugins_filer/src/syntax

	autocmd BufLeave *.filerworkfile call Close() | let $isOpen = 0
augroup END

nnoremap √ :qa!<CR>

nnoremap ß :call Toggle()<CR>

function! Toggle()
	if $isOpen == 0
		call Open()
		call OutputNewTree()
		let $isOpen = 1
	else
		call Close()
		let $isOpen = 0
	endif
endfunction

let s:extensions = ['xml', 'map', 'cond', 'except', 'vali', 'vclass']

function! OutputNewTree()
	let command = CreateFindCommand()
	let paths = GetPaths(command)
	let g:entries = Convert(paths)

	for entry in reverse(g:entries)
		call append(0, entry.output)
	endfor

	execute ':normal Gdd'
	execute ':normal gg'
endfunction

function! CreateFindCommand()
	let base = 'find ' . $devroot
	let names = ''
	for extension in s:extensions
		let names .= ' -name "*.' . extension . '" -or'
	endfor
	let types = ' -type d -or -type f'
	return base . names . types
endfunction

function! GetPaths(command)
	let paths = system(a:command)
	return paths
endfunction

" ex) /vagrant/testdata/hogehogehoge/fugafugafuga/piyopiyopiyo
"     |--                      path                        --|
"     |--    base   --|
"                       |--              tail              --|
"                                                 |-- name --|
function! Convert(paths)
	let entries = []
	for path in split(a:paths, "\n")
		let baseLen = len($devroot)
		let isDir = isdirectory(path)
		let tail = path[baseLen + 1:]
		let name = substitute(tail, '[^/]*/', '    ', 'g')
		let slash = isDir ? '/' : ''

		let entries = entries + [{'path' : path, 'isDir' : isDir, 'output' : name . slash}]
	endfor

	return entries[1:]
endfunction

function! KeyMapping()
	nnoremap <buffer> R    :call ActionReload()<CR>
	nnoremap <buffer> <CR> :call ActionEnter()<CR>
endfunction

function! ActionEnter()
	let entry = GetEntry()
	call Edit(entry)
endfunction

function! GetEntry()
	let cursor = getpos('.')[1]
	return g:entries[cursor - 1]
endfunction

function! ActionReload()
	call OutputNewTree()
endfunction

" edit / tabedit
" xml.tmp とかいらない
